{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('bmh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "def std_fig():\n",
    "    return plt.subplots(1,1,figsize=(4,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For these algorithms, we will use data from the Stanford CS 229 problem set 1 dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_dir = '../data/cs229/PS1-data/q2/data/'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#X = np.loadtxt(data_dir + 'x.dat')\n",
    "#Y = np.loadtxt(data_dir + 'y.dat')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The idea is that we want to discover the weights $\\theta$ such that \n",
    "\n",
    "$$ h_\\theta(x) = \\theta_0 + \\theta_1 x_1 +\\ldots + \\theta_n x_n $$\n",
    "\n",
    "is a good model for predicting the output $y$ from an input $x$. We can make the notation more compact by defining $x_0=1$ and writing\n",
    "$$ h(x) = \\theta^T x$$\n",
    "\n",
    "How do we choose $\\theta$ (and hence, $h(x)$)? We define the cost function\n",
    "$$ J(\\theta) = \\frac{1}{2} \\sum_{i=1}^m \\left(h_\\theta(x^{(i)}) - y^{(i)}\\right)^2 $$\n",
    "\n",
    "This is the familiar __least squares__ cost function. There is more than one way to minimize $J$; we consider some common algorithms here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The normal equations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The most direct way of minimizing $J$ involves finding the derivative of $J(\\theta)$ with respect to $\\theta$ and setting it equal to zero. This is how the classical least-squares form is derived, and works because the objective function to be minimized is convex.\n",
    "\n",
    "### matrix derivatives"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We define the derivative of some function $f$ with respect to a matrix $A\\in\\mathbb{R}^{n\\times m}$ to be:\n",
    "\n",
    "\\begin{equation}\n",
    "\\nabla_A f(A) \\equiv \n",
    "\\left[\n",
    "\\begin{array}\n",
    "\\frac{\\partial f}{\\partial A_{11}} & \\cdots & \\frac{\\partial f}{\\partial A_{1n}} \\\\\n",
    "\\vdots & \\ddots & \\vdots \\\\\n",
    "\\frac{\\partial f}{\\partial A_{m1}} & \\cdots & \\frac{\\partial f}{\\partial A_{mn}},\n",
    "\\end{array}\\right]\n",
    "\\end{equation}\n",
    "\n",
    "that is, the derivative of a function with respect to a matrix is the derivative of the function with respect to each entry of the matrix:\n",
    "$$ \\left[\\nabla_A f(A)\\right]_{ij} = \\frac{\\partial f}{a_{ij}}.$$\n",
    "\n",
    "We also make use of the trace operator $\\text{tr} A = \\sum_{i=1}^n a_{ii}$. The trace operator is a symmetric, linear operator. It's easy enough to check this. We can write out some identities"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\\begin{align}\n",
    "\\nabla_A \\text{tr} AB &= B^T \\\\\n",
    "\\nabla_{A^T} f(A) &= \\left(\\nabla_A f(A)\\right)^T \\\\\n",
    "\\nabla _A \\text{tr} ABA^TC &= CAB + C^T AB^T\n",
    "\\end{align}\n",
    "\n",
    "In the first equation, for example, we have that $AB$ is square, so we can take its trace. The derivative of this trace with respect to $A$ is itself a matrix. It will have the same entries as $B^T$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### the least-squares solution\n",
    "\n",
    "We can now derive the exact minimizer $\\theta$ of $J(\\theta)$. We define the __design matrix__ $X$ as the $m\\times (n+1)$ matrix ($n+1$ for the intercept term) which contains the training examples in each row and the vector $y$ containing the target values from the training set"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\\begin{equation}\n",
    "X = \\left[\n",
    "\\begin{array}{c}\n",
    "\\left(x^{(1)}\\right)^T\\\\ \n",
    "\\vdots \\\\\n",
    "(x^{(m)})^T \\\\\n",
    "\\end{array}\n",
    "\\right], \n",
    "y = \\left[\n",
    "\\begin{array}{c}\n",
    "y^{(1)} \\\\ \n",
    "\\vdots \\\\ \n",
    "y^{(m)} \\\\\n",
    "\\end{array}\n",
    "\\right]\n",
    "\\end{equation}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then \n",
    "\n",
    "\\begin{equation}\n",
    "X\\theta - y = \n",
    "\\left[\n",
    "\\begin{array}{c}\n",
    "(x^{(1)})^T \\theta - y^{(1)} \\\\ \n",
    "\\vdots \\\\\n",
    "h_\\theta(x^{(m)}) - y^{(m)} \\\\\n",
    "\\end{array}\n",
    "\\right]\n",
    "\\end{equation}\n",
    "\n",
    "and hence \n",
    "\n",
    "$$ J(\\theta) = \\frac{1}{2} \\sum_{i=1}^m \n",
    "\\left(h_\\theta\\left(x^{(i)}\\right) - y^{(i)}\\right)^2\n",
    "= \\frac{1}{2} (X\\theta - y)^T (X\\theta - y)\n",
    "$$\n",
    "\n",
    "Hence \n",
    "\\begin{align}\n",
    "\\nabla_\\theta J(\\theta) &= \\frac{1}{2} (X\\theta - y)^T (X\\theta - y) \\\\\n",
    "&= \\frac{1}{2} \\nabla_\\theta \\left((X\\theta)^T(X\\theta) - (X\\theta)^T y - y^T X\\theta + y^T y\\right) \\\\\n",
    "&= \\frac{1}{2} \\nabla_\\theta \\text{tr}\\left((X\\theta)^T(X\\theta) - (X\\theta)^T y - y^T X\\theta + y^T y\\right) \\\\\n",
    "&= \\frac{1}{2} \\nabla_\\theta \\left(\\text{tr}(X\\theta)^T(X\\theta) - 2\\text{tr } y^T (X\\theta) \\right) \\\\\n",
    "&= \\frac{1}{2} \\left(2X^TX\\theta - 2X^Ty \\right)\n",
    "\\end{align}\n",
    "\n",
    "where in the third step, we used the fact that a real number is its own trace. In the last step, we used\n",
    "$$ \\nabla_\\theta \\text{tr } \\theta^T(X^T X) \\theta I  = \\left[\\nabla_{\\theta^T} \\text{tr} \\underbrace{\\theta^T}_{A} \\underbrace{(X^T X)}_{B} \\underbrace{\\theta}_{A^T} \\underbrace{I}_C \\right] ^T = \\left[\\theta^T X^TX + \\theta^T X^TX\\right]^T = 2 X^TX \\theta$$\n",
    "and \n",
    "$$ \n",
    "\\nabla_\\theta \\text{tr } y^T(X\\theta) = \\left[\\nabla_{\\theta^T} \\text{tr }\\theta^T(X^Ty)\\right]^T = \\left[(X^T y)^T\\right]^T = X^Ty\n",
    "$$\n",
    "\n",
    "Therefore analytically requiring that $\\nabla_\\theta J(\\theta) = 0$ along with the fact that $J$ is convex and quadratic allows us to solve the minimization problem directly via the __normal equations__:\n",
    " $$ \\frac{1}{2} \\left(2X^TX\\theta - 2X^Ty \\right) = 0 \\qquad \\Rightarrow \\theta = (X^TX)^{-1} X^T y $$\n",
    " \n",
    "This is the closed-form classical least squares solution, which can be computed directly without need for iteration."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then \n",
    "\\begin{equation}\n",
    "X\\theta - y = \n",
    "\\left[\n",
    "\\begin{array}{c}\n",
    "( x^{(1)})^T \\theta - y^{(1)} \\\\ \n",
    "\\vdots \\\\\n",
    "h_\\theta(x^{(m)}) - y^{(m)} \n",
    "\\end{array}\n",
    "\\right]\n",
    "\\end{equation}\n",
    "\n",
    "and hence \n",
    "$$ J(\\theta) = \\frac{1}{2} \\sum_{i=1}^m \n",
    "\\left(h_\\theta\\left(x^{(i)}\\right) - y^{(i)}\\right)^2\n",
    "= \\frac{1}{2} (X\\theta - y)^T (X\\theta - y)\n",
    "$$\n",
    "\n",
    "Hence \n",
    "\\begin{align}\n",
    "\\nabla_\\theta J(\\theta) &= \\frac{1}{2} (X\\theta - y)^T (X\\theta - y) \\\\\n",
    "&= \\frac{1}{2} \\nabla_\\theta \\left((X\\theta)^T(X\\theta) - (X\\theta)^T y - y^T X\\theta + y^T y\\right) \\\\\n",
    "&= \\frac{1}{2} \\nabla_\\theta \\text{tr}\\left((X\\theta)^T(X\\theta) - (X\\theta)^T y - y^T X\\theta + y^T y\\right) \\\\\n",
    "&= \\frac{1}{2} \\nabla_\\theta \\left(\\text{tr}(X\\theta)^T(X\\theta) - 2\\text{tr } y^T (X\\theta) \\right) \\\\\n",
    "&= \\frac{1}{2} \\left(2X^TX\\theta - 2X^Ty \\right)\n",
    "\\end{align}\n",
    "\n",
    "where in the third step, we used the fact that a real number is its own trace. In the last step, we used\n",
    "$$ \\nabla_\\theta \\text{tr } \\theta^T(X^T X) \\theta I  = \\left[\\nabla_{\\theta^T} \\text{tr} \\underbrace{\\theta^T}_{A} \\underbrace{(X^T X)}_{B} \\underbrace{\\theta}_{A^T} \\underbrace{I}_C \\right] ^T = \\left[\\theta^T X^TX + \\theta^T X^TX\\right]^T = 2 X^TX \\theta$$\n",
    "and \n",
    "$$ \n",
    "\\nabla_\\theta \\text{tr } y^T(X\\theta) = \\left[\\nabla_{\\theta^T} \\text{tr }\\theta^T(X^Ty)\\right]^T = \\left[(X^T y)^T\\right]^T = X^Ty\n",
    "$$\n",
    "\n",
    "Therefore analytically requiring that $\\nabla_\\theta J(\\theta) = 0$ along with the fact that $J$ is convex and quadratic allows us to solve the minimization problem directly:\n",
    " $$ \\frac{1}{2} \\left(2X^TX\\theta - 2X^Ty \\right) = 0 \\qquad \\Rightarrow \\theta = (X^TX)^{-1} X^T y $$\n",
    " \n",
    "This is the closed-form classical least squares solution, which can be computed directly without need for iteration. However, in cases where the matrices in question are sufficiently large or ill-conditioned that evaluating the least squares solution directly is not feasible, we consider other common approaches.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Batch gradient descent and LMS algorithm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use a search algorithm to find $\\theta$ which minimizes $J(\\theta)$. The rough approach starts with an initial guess for $\\theta$ and iterates to make $J(\\theta)$ smaller, until (hopefully) convergence. We consider the __gradient descent__ algorithm, which has the update rule\n",
    "\n",
    "\\begin{equation}\n",
    "\\theta_{j} := \\theta_j - \\alpha \\frac{\\partial}{\\partial \\theta_j} J(\\theta)\n",
    "\\end{equation}\n",
    "\n",
    "This update is performed for all values of $j$. Here $\\alpha$ is called the __learning rate__. The algorithm works by taking steps in the direction of the steepest decrease of $J$. We can work out the partial derivative directly, supposing there were only one trianing example:\n",
    "\n",
    "\\begin{align}\n",
    "\\frac{\\partial}{\\partial \\theta_j} J(\\theta) \n",
    "&= \\frac{\\partial}{\\partial \\theta_j} \\frac{1}{2} \\left(h_\\theta(x) - y\\right)^2 \\\\\n",
    "&= \\left(h_\\theta(x) - y\\right) \\cdot \\frac{\\partial}{\\partial \\theta_j} \\left(h_\\theta(x) - y\\right) \\\\\n",
    "&=\\left(h_\\theta(x) - y\\right) \\cdot \\frac{\\partial}{\\partial \\theta_j} \\left(\\sum_{i=0}^n \\theta_i x_i - y\\right) \\\\\n",
    "&= \\left(h_\\theta(x) - y\\right) x_j\n",
    "\\end{align}\n",
    "\n",
    "giving the update rule\n",
    "$$ \\theta_{j} := \\theta_j + \\alpha\\left(y^{(i)} - h_\\theta(x^{(i)}\\right)x_j^{(i)}. $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The interpretation here is that we compute the direction of the gradient $\\nabla J = \\frac{\\partial J}{\\partial \\theta_j}$ and walk a step size $\\alpha$ in the negative gradient direction (direction of steepest decrease). This is called the least mean squares (LMS) update rule. However, in the case of more than one training data point, we simply use the sum as if we were taking the derivative with respect to $J(\\theta)$:\n",
    "\n",
    "$$ \\theta_j := \\theta_j + \\alpha \\frac{1}{m}\\sum_{i=1}^m \\left(y^{(i)} - h_\\theta\\left(x^{(i)}\\right)\\right) x_j^{(i)} \\qquad \\text{for every } j$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since this uses every training example at every step, this is called __batch gradient descent__. Because $J(\\theta)$ is a convex quadratic function, this algorithm should always converge, given an $\\alpha$ not too large."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we write an implementation of batch gradient descent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def batch_gradient_descent(x, y, α=0.01, iterations=100):\n",
    "    m, d = x.shape\n",
    "    θ = np.zeros_like(x[0,:])\n",
    "    h = lambda θ, x: np.dot(x, θ)\n",
    "    \n",
    "    θ_history = np.zeros((len(θ), iterations))\n",
    "    cost_history = np.zeros(iterations)\n",
    "        \n",
    "    for iteration in range(iterations):\n",
    "        θ +=  α * 1/m*x.T.dot(y - h(θ, x))\n",
    "        cost_history[iteration] = 1./2 * np.sum((y- h(θ, x))**2)\n",
    "        θ_history[:,iteration] = θ\n",
    "    return θ, θ_history, cost_history\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We create a noisy dataset to test our algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "m = 100\n",
    "d = 1\n",
    "x = np.ones((m, d+1)) \n",
    "x[:, d] = np.linspace(0, 1, m)\n",
    "y = (x[:,1] + 0.1*np.random.randn(len(x)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We use our implementation to find the line of best fit, and plot the convergence history."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# run GD\n",
    "θ, hist, cost = batch_gradient_descent(x, y, α=1, iterations=30) \n",
    "\n",
    "# generate best fit line\n",
    "b, a = θ\n",
    "x_test = np.linspace(0, 1, 200)\n",
    "y_pred = a*x_test + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/foucartc/anaconda3/envs/NMSMExp_env/lib/python3.6/site-packages/ipykernel/__main__.py:2: FutureWarning: `rcond` parameter will change to the default of machine precision times ``max(M, N)`` where M and N are the input matrix dimensions.\n",
      "To use the future default and silence this warning we advise to pass `rcond=None`, to keep using the old, explicitly pass `rcond=-1`.\n",
      "  from ipykernel import kernelapp as app\n"
     ]
    }
   ],
   "source": [
    "# compare to least squares\n",
    "lst = np.linalg.lstsq(x, y)\n",
    "blst, alst = lst[0]\n",
    "y_lst = alst*x_test + blst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, 3, figsize=(15, 5))\n",
    "\n",
    "ax[0].set_title('best fit line, batch gradient descent')\n",
    "ax[0].scatter(x[:,1], y)\n",
    "ax[0].plot(x_test, y_lst, 'k--', label='least sq')\n",
    "ax[0].plot(x_test, y_pred, 'orange', linewidth=2,\n",
    "           label='batch grad desc')\n",
    "ax[0].legend()\n",
    "\n",
    "\n",
    "ax[1].set_title(r'$\\theta$ convergence history')\n",
    "ax[1].plot(hist[0,:], hist[1,:], '-o')\n",
    "\n",
    "ax[2].plot(np.arange(len(cost)), cost, '-o')\n",
    "ax[2].set_title(r'cost function $J(\\theta)$ vs. iterations')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Stochastic gradient descent"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The problem with batch gradient descent is that if the dataset is large ($m$ large), we have to compute the sum over the entire dataset before we update $\\theta_j$. A cheaper alternative that tends to work very well in practice is __stochastic gradient descent__, which updates $\\theta_j$ at every training set example. In practice, stochastic gradient descent tends to outperform batch gradient descent."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def stochastic_gradient_descent(x, y, α=0.01, iterations=10):\n",
    "    m, d = x.shape\n",
    "    θ = np.zeros_like(x[0,:])\n",
    "    h = lambda θ, x: np.dot(x, θ)\n",
    "    \n",
    "    θ_history = np.zeros((len(θ), iterations))\n",
    "    cost_history = np.zeros(iterations)\n",
    "    for iteration in range(iterations):\n",
    "        for i in range(m):\n",
    "            θ +=  α *x[i,:].T.dot(y[i] - h(θ, x[i,:]))\n",
    "        cost_history[iteration] = 1./2 * np.sum((y- h(θ, x))**2)\n",
    "        θ_history[:,iteration] = θ\n",
    "    return θ, θ_history, cost_history\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# run GD\n",
    "θ, hist, cost = stochastic_gradient_descent(x, y, α=0.5, iterations=25) \n",
    "\n",
    "# generate best fit line\n",
    "b, a = θ\n",
    "x_test = np.linspace(0, 1, 200)\n",
    "y_pred = a*x_test + b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x360 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1, 3, figsize=(15, 5))\n",
    "\n",
    "ax[0].set_title('best fit line, stochastic gradient descent')\n",
    "ax[0].scatter(x[:,1], y)\n",
    "ax[0].plot(x_test, y_lst, 'k--', label='least sq')\n",
    "ax[0].plot(x_test, y_pred, 'orange', linewidth=2, label='stoch grd desc')\n",
    "ax[0].legend()\n",
    "\n",
    "\n",
    "ax[1].set_title(r'$\\theta$ convergence history')\n",
    "ax[1].plot(hist[0,:], hist[1,:], '-o')\n",
    "\n",
    "ax[2].plot(np.arange(len(cost)), cost, '-o')\n",
    "ax[2].set_title(r'cost function $J(\\theta)$ vs. iterations')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that SGD may be less accurate than batch gradient descent, and may oscillate around the local minimum. However, when the training set is very large, it is often preferred over batch gradient descent."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### a remark on \"learning rate\" $\\alpha$\n",
    "\n",
    "Returning to the interpretation of $\\alpha$ as the step size we take in the direction of the negative gradient $-\\nabla J(\\theta)$, a natural question is what step size should be used.\n",
    "\n",
    "In very simple cases, such as gradient descent for solving a system of linear equations (and hence a minimization over a convex, quadratic objective function), the optimal step size can be computed analytically. If the current iterate is $\\theta^{(i)}$, then we take $\\alpha$ as the distance that minmizes $J(\\theta)$ along the search line $\\theta^{(i)} + \\alpha v$ where $v$ is the direction of steepest descent; that is,\n",
    "\n",
    "\\begin{equation}\n",
    "\\alpha = \\arg \\min_{\\gamma} J(\\theta^{(i)} + \\gamma v, \\qquad v = -\\nabla J(\\theta)\n",
    "\\end{equation}\n",
    "\n",
    "which we find by taking the derivative of $J$ along the search direction with respect to $\\gamma$ and set it equal to zero: $$\\frac{d}{d\\gamma} J(\\theta^{(i)} + \\gamma v) = 0.$$\n",
    "\n",
    "However, for more general objective functions, computing the derivative with respect to $\\gamma$ may be expensive, and potentially has no guarantee of a minimum. So we can only use this step size in special cases.\n",
    "\n",
    "A more general heuristic to find a good step size is using the so-called __backtracking line search__. In this approach at each step, we choose a $\\gamma_0$ which is usually more ambitious than the previous value of $\\gamma$. Then we check to see if the point $\\theta^{(i)} + \\gamma_0 v$ is good, e.g., with the Armijo-Goldstein condition\n",
    "\n",
    "$$ J(\\theta^{(i)} + \\gamma_0 v) \\leq J(\\theta^{(i)}) - c\\gamma_0 \\,||\\nabla J(\\theta^{(i)}) ||_2^2. $$\n",
    "\n",
    "If it satisfies, just take the step. If it doesn't, try the test again with a smaller $\\gamma_1 =\\gamma_0/2$ and continue to divide by two until the criterion is satisfied. Then take the step. This is generally much cheaper than doing the exact line search."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Probabilistic interpretation\n",
    "\n",
    "Least squares as we've seen it can be boiled down to minimizing the cost\n",
    "function \n",
    "\\begin{equation}\n",
    "J(\\theta) = \\frac{1}{2} \\sum_{i=1}^{m} \\left(y^{(i)} - \\theta^T x^{(i)}\\right)^2\n",
    "\\end{equation}\n",
    "\n",
    "Which lends itself to the question of: why this cost function? Why not minimize\n",
    "a different cost function. For example, we could have easily chose to minimize\n",
    "the cost functions\n",
    "\n",
    "\\begin{align}\n",
    "J_1(\\theta) &= \\frac{1}{2} \\sum_{i=1}^{m} \\left|y^{(i)} - \\theta^T\n",
    "x^{(i)}\\right| \\\\\n",
    "J_3(\\theta) &= \\frac{1}{2} \\sum_{i=1}^{m} \\left(y^{(i)} - \\theta^T\n",
    "x^{(i)}\\right)^3.\n",
    "\\end{align}\n",
    "\n",
    "However, there is a nice probabilistic argument that suggests least squares is\n",
    "the way to go. Suppose that all the outputs were generated by our model, but\n",
    "with some random Gaussian noise. \n",
    "\n",
    "This noise $\\epsilon^{(i)}$ could represent features that we missed with our\n",
    "model, or noisy observation---but we presume that it's normally distributed with\n",
    "mean zero and variance $\\sigma^{2}$, i.e., the probability mass function over\n",
    "the noise $\\epsilon$\n",
    "\n",
    "\\begin{equation}\n",
    "p_{\\epsilon}\\left(\\epsilon^{(i)}\\right) = \\frac{1}{\\sigma\\sqrt{2\\pi}}\n",
    "\\exp\\left(-\\frac{\\left(\\epsilon^{(i)}\\right)^2}{2 \\sigma^2} \\right)\n",
    "\\end{equation}\n",
    "\n",
    "and that the noise is i.i.d.."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These aren't terrible assumptions because the central limit theorem suggests\n",
    "that a Gaussian representation is a good one for the sum of many i.i.d. random\n",
    "variables, and the i.i.d. assumption is usually a good one because we presume\n",
    "the unknown factors are fair (they'll sometimes overestimate, and sometimes\n",
    "underestimate the true value but won't be biased) and that they're independent\n",
    "of one another.\n",
    "\n",
    "If all this is true, then we can write down the probability of a given\n",
    "observation $y^{(i)}$ given the features $x^{(i)}$ is the conditional\n",
    "probability\n",
    "\n",
    "\\begin{equation}\n",
    "p\\left(y^{(i)}|x^{(i)};\\theta\\right) = \\frac{1}{\\sigma\\sqrt{2\\pi}}\n",
    "\\exp\\left(-\\frac{\\left(y^{(i)}- \\theta^T x^{(i)}\\right)^{2}}{2 \\sigma^2}\n",
    "\\right).\n",
    "\\end{equation}\n",
    "\n",
    "This makes sense, since the error is the only random part, so we would expect\n",
    "the observation to be normally distributed with mean $\\theta^t x^{(i)}$ and\n",
    "variance $\\sigma^2$, i.e., $p\\left(y^{(i)}|x^{(i)}; \\theta\\right)\\sim\n",
    "\\mathcal{N}\\left(\\theta^T x^{(i)}, \\sigma^2\\right)$---this notation expresses\n",
    "that we are not conditioning on $\\theta$ since $\\theta$ is not a random\n",
    "variable, it's our model (this a frequentist way of viewing things).\n",
    "\n",
    "We could consider the distribution over all the observations $y$ (a vector),\n",
    "given a set of inputs $X$ (sometimes called the design matrix) for a fixed value\n",
    "of $\\theta$; we would write it as $p\\left(y|X;\\theta\\right)$. If we wanted to\n",
    "view this distribution as a function of $\\theta$ instead, we could treat\n",
    "$\\theta$ as a parameter. We call this the likelihood function\n",
    "\n",
    "\\begin{equation}\n",
    "L(\\theta) = L(\\theta; X,y) = p(y| X;\\theta).\n",
    "\\end{equation}\n",
    "\n",
    "But since all the randomness comes from the noise, and the noises\n",
    "$\\epsilon^{(i)}$ are independent of one another, we can explicitly write out the\n",
    "likelihood as \n",
    "\n",
    "\\begin{align}\n",
    "L(\\theta) &= \\prod_{i=1}^m p\\left(y^{(i)}|x^{(i)};\\theta\\right) \\\\\n",
    "&= \\prod_{i=1}^m \\frac{1}{\\sigma\\sqrt{2\\pi}}\n",
    "\\exp\\left(-\\frac{\\left(y^{(i)}- \\theta^T x^{(i)}\\right)^{2}}{2 \\sigma^2}\n",
    "\\right).\n",
    "\\end{align}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we were interested in finding the best linear model $\\theta$ to fit the\n",
    "observations $y$ given the data $X$, we would want to maximize the likelihood\n",
    "over $\\theta$ (maximum likelihood estimate). We are searching for the $\\theta$\n",
    "which maximizes the probability of making the observations given the data.\n",
    "\n",
    "However, for numerical reasons and ease of derivations, we maximize the\n",
    "log-likelihood \n",
    "\n",
    "\\begin{equation}\n",
    "\\ell(\\theta) = \\log L(\\theta),\n",
    "\\end{equation}\n",
    "\n",
    "rather than the likelihood itself. Writing out the algebra, we wish to maximize \n",
    "\n",
    "\\begin{align}\n",
    "\\ell(\\theta) &= \\log \\prod_{i=1}^m \\frac{1}{\\sigma\\sqrt{2\\pi}}\n",
    "\\exp\\left(-\\frac{\\left(y^{(i)}- \\theta^T x^{(i)}\\right)^{2}}{2 \\sigma^2}\n",
    "\\right)\\\\\n",
    "&= \\sum_{i=1}^{m} \\left[\n",
    "\\log\n",
    "\\left(\\frac{1}{\\sigma\\sqrt{2\\pi}}\\right)\n",
    "+ \\log\\exp\\left(-\\frac{\\left(y^{(i)}- \\theta^T x^{(i)}\\right)^{2}}{2 \\sigma^2}\\right)\n",
    "\\right] \\\\\n",
    "&= \\underbrace{m\\log\n",
    "\\left(\\frac{1}{\\sigma\\sqrt{2\\pi}}\\right)}_{\\text{constant, doesn't affect maximization}}\n",
    "- \\frac{1}{\\sigma^2} \\cdot\n",
    "\\underbrace{\n",
    "\\frac{1}{2}\\left(-\\frac{\\left(y^{(i)}- \\theta^T x^{(i)}\\right)^{2}}{2\n",
    "\\sigma^2}\\right)}_{J(\\theta)}\n",
    "\\end{align}\n",
    "\n",
    "So maximizing the log-likelihood reduces to minimizing the original cost\n",
    "function $J(\\theta)$ from least squares. So least squares corresponds to a\n",
    "maximum likelihood estimate of $\\theta$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Locally weighted linear regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Linear regression using `sckikit-learn`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python [conda env:NMSMExp_env]",
   "language": "python",
   "name": "conda-env-NMSMExp_env-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
