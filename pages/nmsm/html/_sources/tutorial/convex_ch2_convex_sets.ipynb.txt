{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Convex sets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Affine and convex sets\n",
    "### Lines and line segments"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let $x_1, x_2$ be points in $\\mathbb{R}^n$. We can think of a line segment as \n",
    "\n",
    "\\begin{equation}\n",
    "y = \\theta x_1 + (1-\\theta) x_2\n",
    "\\label{eq:line_seg}\n",
    "\\end{equation}\n",
    "\n",
    "where $\\theta$ is a parameter that varies on $[0,1]$. Allowing $\\theta$ to vary outside that range sweeps out a line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 288x216 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "θ = np.linspace(0,1,50)\n",
    "x1, x2 = np.array([1., 2]), np.array([-1, -3])\n",
    "pts = x1*θ[:,None] + (1-θ[:,None])*x2\n",
    "\n",
    "# plot result\n",
    "fig, ax = plt.subplots(1, 1, figsize=(4,3))\n",
    "plt.scatter(pts[:,0], pts[:,1], c=θ)\n",
    "plt.colorbar()\n",
    "plt.title(r'$\\theta$ in $\\theta x_1 + (1-\\theta)x_2$')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Affine sets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Definition**\n",
    "\n",
    "- Loosely, a set $C$ is *affine* if the __entire line__ through any two points in $C$ lies in $C$.\n",
    "\n",
    "- Formally, a set $C\\subseteq\\mathbb{R}^n$ is *affine* if, for any $x_1, x_2 \\in \\mathbb{R}^n$ and $\\theta\\in\\mathbb{R}$, the set $\\theta x_1 + (1-\\theta)x_2 \\in C$\n",
    "\n",
    "![Affine examples](convex_img/affine_example.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Related concept: affine combination**\n",
    "\n",
    "A point of the form $\\theta_1 x_1 + \\ldots + \\theta_k x_k$ where $\\theta_1 + \\ldots + \\theta_k = 1$ is called an *affine combination* of the points $x_1,\\ldots,x_n$.\n",
    "\n",
    "- Our check for an affine set was to see whether for any two points $x_1, x_2 \\in C$, $$\\theta x_1 + (1-\\theta)x_2$$ is also in $C$; since $\\theta + (1-\\theta) = 1$. So this is a generalization that extends to $k$ points. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convex sets\n",
    "\n",
    "**Definition:**\n",
    "- Loosely, a set $C$ is *convex* if the line segment between any two points in $C$ also lies in $C$.\n",
    "- Geometrically, for any two points in a set, if the line segment connecting them always lies in the set, the set is convex.\n",
    "- Formally, for any $x_1,x_2\\in C$ and any $\\theta$ with $0\\leq\\theta\\leq1$, the point $\\theta x_1 + (1-\\theta)x_2 \\in C$.\n",
    "\n",
    "![Convexity example](convex_img/convex_set_examples.jpg)\n",
    "\n",
    "Similarly, a point $\\theta_1 x_1 + \\ldots \\theta_k x_k$ where $\\theta^T \\mathbf{1} = 1$ (slight abuse of notation, where we consider all $\\theta_i$ as a vector) and $\\theta_i \\geq 0$, is called a *convex combination* of the points $x_1, \\ldots, x_k$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "by choosing some points $x_1, x_2, x_3, x_4$ and appropriate $\\theta$, we can sweep out what the convex combination looks like."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# choose 4 points in R^2\n",
    "x = np.array([[1,   1  ],\n",
    "              [2,   1  ],\n",
    "              [1.5, 2  ],\n",
    "              [1.7, 0.7]])\n",
    "n = 10000\n",
    "pts = np.zeros((n, 2))\n",
    "for i in range(n):\n",
    "    θ = np.random.random(4)\n",
    "    θ *= 1/np.sum(θ)          # ensure sum to 1\n",
    "    pts[i,:] = np.dot(θ.T, x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 288x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(1,1,figsize=(4,4))\n",
    "ax.scatter(pts[:,0], pts[:,1])\n",
    "ax.scatter(x[:,0], x[:,1], c='k')\n",
    "ax.set_title(r'{} convex combinations of $x_k$'.format(n))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We see that it's sweeping out the interior region defined by the four  points. Continuing to make this plot for arbitrarily many convex points would give the *convex hull* of the points $x_k$.\n",
    "\n",
    "Formally, the *convex hull* of a set $C$, $\\text{conv }C$ is the set of all convex combinations of the points in $C$\n",
    "$$\\text{conv }C = \\{\\theta_1 x_1 + \\ldots + \\theta_k x_k | x_i \\in C,\\, \\theta_i \\geq 0,\\, \\theta^T\\mathbf{1} = 1\\} $$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Examples of convex sets**\n",
    "\n",
    "1. The empty set $\\emptyset$ is convex\n",
    "2. Any singleton set $\\{x_0\\}$ is convex\n",
    "3. Any line is affine, hence convex\n",
    "4. Any line segment is convex, but not affine (unless it's a single point)\n",
    "5. A ray is convex\n",
    "6. Any subspace is affine (and, in fact, a convex cone)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**The outer product of two convex sets is convex.**\n",
    "\n",
    "Let $S$ and $T$ be convex sets and take $\\theta\\in [0,1]$. Let $(x_1,y_1),\\, (x_2,y_2)$ be arbitrary points in $S\\times T$. Then $x_1, x_2 \\in S$; and since $S$ is convex, $\\theta x_1 + (1-\\theta)x_2 \\in S$. Similarly, $y_1, y_2 \\in T$, and $\\theta y_1 + (1-\\theta) y_2 \\in T$. Therefore \n",
    "\n",
    "\\begin{equation}\n",
    "\\left(\\theta x_1 + (1-\\theta)x_2,\\, \\theta y_1 + (1-\\theta)y_2\\right) \\in S\n",
    "\\times T.\n",
    "\\end{equation}\n",
    "\n",
    "and , which shows that $\\theta(x_1,y_1) + (1-\\theta)(x_2,y_2) \\in S\\times T$ and the outer product is convex.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Show that a set is convex if and only if its intersection with any line is convex. Show that a set is affine if and only if its intersection with any line is affine.**\n",
    "\n",
    "We only prove the convex part.\n",
    "\n",
    "__proof.__ \n",
    "\n",
    "$(\\Rightarrow)$ Suppose that a set $C$ is convex. Let the set $L$ represent an arbitrary line. If the intersection is the empty set $\\emptyset$, we are done (since the empty set is convex), so suppose the intersection $C \\cap L$ is non-empty. Let $x_1, x_2 \\in C \\cap L$, which implies that $x_1, x_2 \\in C$ and the intersection is convex.\n",
    "\n",
    "$(\\Leftarrow)$ Suppose that the intersection of any line with a set $C$ is convex. Choose any $x_1, x_2 \\in C$. Then the line segment $LS = \\theta x_1 + (1-\\theta) x_2$ with $0\\leq \\theta\\leq 1$ represents a convex subset of the intersection of the line $\\theta x_1 + (1-\\theta)x_2$ with $\\theta\\in\\mathbb{R}$, hence all points in $LS$ lie in $C$. Since choice of $x_1, x_2$ was arbitrary, our conclusion holds for any $x_1, x_2$ and we have that $C$ is convex."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Cones"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Definition:**\n",
    "\n",
    "A set $C$ is called a *cone* if for every $x\\in C$ and $\\theta\\geq 0$ we have that $\\theta x \\in C$.\n",
    "\n",
    "- this implies that every cone contains $0$ by choosing $\\theta=0$.\n",
    "- if you take vector pointing to any $x \\in C$, all points from the origin to $x$ are in the cone.\n",
    "\n",
    "**Convex cones**\n",
    "\n",
    "A set $C$ is a *convex cone* if it is convex and a cone; namely, for any $x_1, x_2 \\in C$ and $\\theta_1, \\theta_2 \\geq 0$, we have that $\\theta_1 x_1 + \\theta_2 x_2 \\in C$. \n",
    "\n",
    "![Convex cone](convex_img/convex_cone.png)\n",
    "\n",
    "**Example: positive semidefinite cone**\n",
    "\n",
    "We use $\\mathbf{S}^n$ to denote the set of symmetric $n\\times n$ matrices.\n",
    "The set $\\mathbf{S}^n_+ = \\left\\{X\\in \\mathbf{S}^n \\mid X \\succeq 0 \\right\\}$ is\n",
    "the set of symmetric positive semidefinite matrices, that is\n",
    "\n",
    "\\begin{equation}\n",
    "X\\in \\mathbf{S}^n_+ \\iff z^T X z \\geq 0 \\; \\text{ for all } z\n",
    "\\end{equation}\n",
    "\n",
    "This is a convex cone. If $\\theta_1,\\theta_2\\geq 0$ and $A,B\\in \\mathbf{S}^n_+$,\n",
    "then\n",
    "\n",
    "\\begin{equation}\n",
    "z^T\\left(\\theta_1 A + \\theta_2 B\\right)z = \n",
    "\\theta_1\\underbrace{ z^T A z}_{\\geq 0} + \n",
    "\\theta_2\\underbrace{ z^T B z}_{\\geq 0}  \\geq 0 \n",
    "\\end{equation}\n",
    "\n",
    "and we have shown convexity.\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Non-convex cones**\n",
    "\n",
    "Can cones be non-convex? Yes, because the strict definition of a cone can specify a \"shell\" of a cone or a bidirectional cone, both of which violate convexity. Roughly, if a cone is one-directional and contains its interior, then it's a convex cone. Below are two examples of non-convex cones: the union of opposing quadrants in $\\mathbb{R}^2$ and the graph of $|x|$.\n",
    "\n",
    "![Non-convex cones](convex_img/non_convex_cones.jpg)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Conic hulls**\n",
    "\n",
    "A point $\\theta_1 x_1 +\\ldots + \\theta_k x_k$ with $\\theta_1,\\ldots,\\theta_k \\geq 0$ is called a *conic combination* of the points $x_i$.\n",
    "\n",
    "Similarly to an convex hull, we can define the *conic hull* of a set $C$ as the set of all conic combinations of points in $C$,\n",
    "$$ \\{\\theta_1 x_1 +\\ldots + \\theta_k x_k \\,| \\, x_i\\in C,\\, \\theta_i \\geq 0\\} $$\n",
    "\n",
    "Intuitively, the conic hull is the convex cone which encloses the set $C$.\n",
    "\n",
    "<img src=\"convex_img/ch2_ex_conic_hull.png\" width=400>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hyerplanes and halfspaces"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Hyperplanes**\n",
    "\n",
    "a hyperplane is a set of the form $\\{x\\,|\\, a^T x = b\\}$ where $a, x\\in \\mathbb{R}^n$ and where $b\\in \\mathbb{R}$.\n",
    "\n",
    "![Hyperplane](convex_img/hyperplane_fig.png)\n",
    "\n",
    "There are a few geometric interpretations of the hyperplane $\\{x\\,|\\, a^T x = b\\}$\n",
    "\n",
    "- if $b=0$, then this is the set of all vectors that are orthogonal to $a$; that is, the solution can be thought of as the plane defined by the normal vector $a$.\n",
    "- if $b\\neq 0$, then the plane in the $b=0$ case is offset from the origin to the y-intercept. \n",
    "\n",
    "We can think of it like   \n",
    "\n",
    "\\begin{equation}\n",
    "\\{x\\,|\\, a^Tx - b = 0\\} = \\{x \\,|\\, a^T(x - x_0) = 0\\},\n",
    "\\end{equation}\n",
    "\n",
    "where $x_0$ is any vector such that $a^T x_0 = b$. This makes sense, because *any* element of the original offset hyperplane can be subtracted to recover the hyperplane passing through the origin.\n",
    "    \n",
    "<img src=\"../img/6.036_hyperplane.png\" width=400>\n",
    "\n",
    "The perpendicular offset of the origin $d$ can be computed by noting that the vector $\\mathbf{0} + da$ lies on the hyperplane. Hence\n",
    "$$\n",
    "a^T(0 + d a) = b \\Rightarrow d = \\frac{b}{a^T a}\n",
    "$$\n",
    "\n",
    "**Halfspaces**\n",
    "\n",
    "A hyperplane divides $\\mathbb{R}^n$ into two halfspaces. A (closed) halfspace is a set of the form\n",
    "\n",
    "\\begin{equation}\n",
    "\\left\\{x \\mid a^T x \\leq b\\right\\}\n",
    "\\end{equation}\n",
    "where $a\\neq 0$. Halfspaces are convex but not affine.\n",
    "\n",
    "\n",
    "![Halfspace](convex_img/halfspace.png)\n",
    "\n",
    "A halfspace is not a vector space. It is not closed under scalar multiplication."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Polyhedra\n",
    "\n",
    "A polyhedron is the solution set of a finite number of linear inequalities and\n",
    "equalities. \n",
    "\n",
    "\\begin{equation}\n",
    "\\mathcal{P} = \\left\\{x \\mid a_j^Tx \\leq b_j,\\; j=1,\\ldots,m, \\;\n",
    "c_j^T x = d_j, \\; j=1,\\ldots,p\\right\\}\n",
    "\\label{eq:polylong}\n",
    "\\end{equation}\n",
    "\n",
    "Instead of using (\\ref{eq:polylong}), it will be convenient to use the notation\n",
    "\n",
    "\\begin{equation}\n",
    "\\mathcal{P} = \\left\\{Ax \\preccurlyeq b,\\; Cx = d\\right\\}\n",
    "\\label{eq:polyshort}\n",
    "\\end{equation}\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "![Polyhedron](convex_img/polyhedra.png)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Convexity preserving operations\n",
    "\n",
    "### Intersections\n",
    "\n",
    "The intersection of any number of convex sets is convex."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Which of the following sets are convex?**\n",
    "\n",
    "A *slab*, i.e., a set of the form $\\left\\{x \\in \\mathbf{R}^n \\mid \\alpha\\leq a^T x \\leq \\beta\\right\\}$.\n",
    "\n",
    "- A slab is the intersection of two halfspaces, and is therefore convex.\n",
    "  \n",
    "  \n",
    "A *rectangle*, i.e., a set of the form $\\left\\{x \\in \\mathbf{R}^n \\mid \\alpha_i \\leq x_i \\leq \\beta_i,\\, i=1,\\ldots,n\\right\\}$. \n",
    "\n",
    "- This is also the intersection of halfspaces, one for each boundary of the rectangle. Therefore it is also convex, and also a polyhedron.\n",
    "\n",
    "\n",
    "A *wedge*, i.e., $\\left\\{x\\in \\mathbf{R}^n\\mid a_1^T x \\leq b_1,\\,  a_2^T x \\leq b_2\\right\\}$.\n",
    "\n",
    "- This is again the intersection of two halfspaces and is therefore convex as well as a polyhedron.\n",
    "  \n",
    "  \n",
    "*The set of points closer to a given point than a given set*, i.e.,\n",
    "\n",
    "$$\\left\\{x \\mid \\left\\Vert x-x_0\\right\\Vert_{2}^{} \\leq \\left\\Vert\n",
    "x-y\\right\\Vert_{2}^{} \\text{ for all } y\\in S\\right\\}.$$\n",
    "\n",
    "where $S\\subseteq \\mathbf{R}^n$.\n",
    "\n",
    "- For each point $y \\in S$, the set of points closer to $x_0$ than to $y$ defines a halfspace. Take the intersection of all these halfspaces (possibly uncountably infinite intersections) and convexity is preserved. The set is convex.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Affine functions\n",
    "\n",
    "A function $f\\colon \\mathbf{R}^n\\to \\mathbf{R}^m$ is *affine* if it is a sum of a linear function and a constant, i.e., if it has the form $f(x) = Ax +b$ where $A\\in \\mathbf{R}^{m\\times n}$ and $b\\in \\mathbf{R}^m$.\n",
    "\n",
    "**Affine functions preserve convexity, which means:**\n",
    "\n",
    "The image of a convex set $C\\subseteq \\mathbf{R}^{n}$ under an affine mapping $f$ is convex. \n",
    "\n",
    "\\begin{equation}\n",
    "C \\subseteq \\mathbf{R}^{n} \\text{ convex } \\Rightarrow f(C) = \\left\\{f(x) \\mid x\n",
    "\\in C \\right\\} \\text{ is convex}\n",
    "\\end{equation}\n",
    "\n",
    "![Affine image](convex_img/aff_func.jpg)\n",
    "\n",
    "It also works in reverse. The *inverse image* $f^{-1}(S)$ of a convex set under\n",
    "$f$ is convex.\n",
    "\n",
    "\\begin{equation}\n",
    "S \\subseteq \\mathbf{R}^{m} \\text{ convex } \\Rightarrow f^{-1}(S) =\n",
    "\\left\\{x\\in \\mathbf{R}^{n} \\mid f(x) \\in S \\right\\} \\text{ is convex }\n",
    "\\end{equation}\n",
    "\n",
    "![Affine inverse image](convex_img/aff_inv.jpg)\n",
    "\n",
    "We can actually get quite a bit of mileage out of this simple result.\n",
    "\n",
    "**Examples**\n",
    "\n",
    "*Solution set of a linear matrix inequality*\n",
    "\n",
    "Suppose we have matrices $B, A_i \\in \\mathbf{S}^m$, for $i=1,\\ldots,n$ and $x\\in \\mathbf{R}^n$. A *linear matrix inequality* is the condition\n",
    "\n",
    "\\begin{equation}\n",
    "A(x) = x_1 A_x + \\ldots + x_n A_n \\preceq B\n",
    "\\end{equation}\n",
    "\n",
    "We can show that the solution set, $\\left\\{x \\mid A(x) \\preceq B\\right\\}$ is\n",
    "convex by using an affine function argument. If $A(x) \\preceq B$ then $B- A(x)\n",
    "\\succeq 0$, which means that $B - A(x) \\in S_+^m$. We define a new function $f(x) = B - A(x)$, which is affine, and the set\n",
    "$S^m_+$ is convex. So\n",
    "\n",
    "\\begin{align}\n",
    "f^{-1}(S^m_+) \n",
    "&= \\left\\{x\\in \\mathbf{R}^{n}\\mid  f(x) \\in S^m_+\\right\\}\\\\\n",
    "&= \\left\\{x\\in \\mathbf{R}^{n}\\mid B - A(x) \\succeq 0\\right\\} \\\\\n",
    "&= \\left\\{x\\in \\mathbf{R}^{n}\\mid A(x) \\preceq B\\right\\}\n",
    "\\end{align}\n",
    "\n",
    "and the solution set of the LMI is convex since it is the inverse image of an affine function on a convex set.\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Linear-fractional and perspective functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Convexity is also preserved under two special types of functions:\n",
    "\n",
    "*Perspective function*\n",
    "\n",
    "The perspective function $P:\\mathbf{R}^{n+1}\\to \\mathbf{R}^{n}$ is defined as \n",
    "\n",
    "\\begin{equation}\n",
    "P(x,t) = x/t, \\qquad \\mathbf{dom} P = \\left\\{(x,t) \\mid t > 0\\right\\}\n",
    "\\end{equation}\n",
    "\n",
    "Intuitively, this function divides all entries of a vector by the last entry and\n",
    "removes the last entry. There is a domain restriction that the last entry $t$ be\n",
    "strictly positive. The image and inverse image of a convex set under the\n",
    "perspective function is convex.\n",
    "\n",
    "*Linear-fractional function*\n",
    "\n",
    "The linear-fractional function $f:\\mathbf{R}^{n}\\to \\mathbf{R}^{m}$ is a\n",
    "generalization of the perspective function.\n",
    "\n",
    "\\begin{equation}\n",
    "f(x) = \\frac{Ax + b}{c^T x + d}, \\qquad \\mathbf{dom} f = \\left\\{x \\mid c^T x + d > 0 \\right\\}\n",
    "\\end{equation}\n",
    "\n",
    "Just like the perspective function, there is a domain restriction where the\n",
    "denominator must be positive. The image and inverse image of a convex set under\n",
    "the perspective function is also convex.\n",
    "\n",
    "\n",
    "**Both the perspective function and linear-fractional functions preserve\n",
    "convexity**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Generalized inequalities\n",
    "\n",
    "A *generalized inequality* is defined by a proper cone $K$.\n",
    "\n",
    "\\begin{equation}\n",
    "x \\preceq_K y \\iff y-x \\in K,\n",
    "\\end{equation}\n",
    "\n",
    "and it's strict equivalent, that\n",
    "\n",
    "\\begin{align}\n",
    "x \\prec_K y \\iff y-x \\in \\mathbf{int} K.\n",
    "\\end{align} \n",
    "\n",
    "**Examples:**\n",
    "\n",
    "*Componentwise inequality* ($K = \\mathbf{R}^{n}_+$)\n",
    "\n",
    "\\begin{equation}\n",
    "x\\preceq_{\\mathbf{R}^{n}_+} y \\iff x_i \\leq y_i, \\; i=1,\\ldots,n\n",
    "\\end{equation}\n",
    "\n",
    "The mental picture is:\n",
    "\n",
    "![Orthant example](convex_img/gen_ineq_orthant.jpg)\n",
    "\n",
    "The thing to be careful about with generalized inequalities is that they do not necessarily specify a total ordering. It may not be possible to definitively say for two points $x,y$ which one is bigger.\n",
    "\n",
    "*Matrix inequality* ($K = \\mathbf{S}^n_+$)\n",
    "\n",
    "\\begin{equation}\n",
    "X\\preceq_{\\mathbf{S}^n_+} Y \\iff Y - X \\text{ positive semidefinite }\n",
    "\\end{equation}\n",
    "\n",
    "\n",
    "### Minimum and minimal elements"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As was mentioned above, $\\preceq_K$ is not in general a linear ordering. We can\n",
    "have both that $x \\npreceq_K y$ and $y \\npreceq_K x$. However, since $K$ does\n",
    "create an ordering, we have a notion of a minimum element.\n",
    "\n",
    "A point $x\\in S$ is the *minimum element* of $S$ with respect to $\\preceq_K$ if \n",
    "\n",
    "\\begin{equation}\n",
    "y \\in S \\implies x \\preceq_K y\n",
    "\\end{equation}\n",
    "\n",
    "A point $x\\in S$ is a *minimal element* of $S$ with respect to $\\preceq_K$ if \n",
    "\n",
    "\\begin{equation}\n",
    "y\\in S,\\, y \\preceq_K x \\implies y =x \n",
    "\\end{equation}\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Examples with** $K=\\mathbf{R}^{2}_+$\n",
    "\n",
    "*a minimum element*\n",
    "\n",
    "![gen ineq ex1](convex_img/gen_ineq_ex1.jpg)\n",
    "\n",
    "In the example above, the cone $\\mathbf{R}^{2}_+$ shows all elements that are unambiguously larger than $x_1$. We see that $x$ is the minimum element of $S_1$, since it is unambiguously the least element in the set. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*a minimal element*\n",
    "\n",
    "![gen ineq ex2](convex_img/gen_ineq_ex2.jpg)\n",
    "\n",
    "Here $x_2$ is not a minimum element. For example, $x_2$ is not unambiguously\n",
    "less than $y$. However, it is a *minimal* element of $S_2$, because there is no\n",
    "point that is unambiguously less than or equal to $x_2$ (other than itself)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Example with a different cone**\n",
    "![gen ineq ex3](convex_img/gen_ineq_ex3.jpg)\n",
    "\n",
    "In this modified example with a new cone $K$, $x_1$ is a minimal element but not the minimum because the set $S$ does not lie entirely within the cone.\n",
    "\n",
    "In general, a good way of thinking of this is: if a point is a minimum element means that *all points are more*, a minimal element means that *no points are less*."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dual cones and generalized inequalities\n",
    "\n",
    "### Dual cones\n",
    "\n",
    "The *dual cone* of a cone $K$ is the set\n",
    "\n",
    "\\begin{equation}\n",
    "K^* = \\left\\{y \\mid y^T x \\geq 0 \\text{ for all } x \\in K\\right\\}\n",
    "\\end{equation}\n",
    "\n",
    "Mental image:\n",
    "\n",
    "![Dual cone mental picture](convex_img/dual_cone_mental.jpg)\n",
    "\n",
    "\n",
    "**Examples of dual cones**\n",
    "\n",
    "$K$ is a *subspace*\n",
    "\n",
    "The dual cone of a subspace $V \\subseteq \\mathbf{R}^{n}$ (which is a cone) is its orthogonal complement $V^{\\perp} = \\left\\{y \\mid v^T y = 0 \\text{ for all } v \\in V\\right\\}$.\n",
    "\n",
    "*nonnegative orthant*\n",
    "\n",
    "The dual cone of $\\mathbf{R}^{n}_+$ is itself, because the set of all $y$ such that\n",
    "\n",
    "\\begin{equation}\n",
    "x^T y \\geq 0 \\text{ for all } x \\succeq 0 \\iff y \\succeq 0.\n",
    "\\end{equation}\n",
    "\n",
    "(This type of cone is called a *self-dual cone*.)\n",
    "\n",
    "$K$ *is a halfspace*\n",
    "![Dual ex1](convex_img/dual_cone_ex1.jpg)\n",
    "\n",
    "$K$ *is a line*\n",
    "![Dual ex2](convex_img/dual_cone_ex2.jpg)\n",
    "\n",
    "$K = \\mathbf{R}^2$\n",
    "\n",
    "\\begin{equation}\n",
    "K^* = \\left\\{\\mathbf{0}\\right\\}.\n",
    "\\end{equation}\n",
    "\n",
    "(Special case of subspace)\n",
    "\n",
    "**Properties of dual cones**\n",
    "\n",
    "- Dual cones are always closed and convex.\n",
    "- Dual cones of proper cones are proper, and hence define generalized inequalities\n",
    "\n",
    "\\begin{equation}\n",
    "y \\succeq_{K^*} 0 \\iff y^T x \\geq 0 \\text{ for all } x \\succeq_K 0\n",
    "\\end{equation}\n",
    "\n",
    "### Dual generalized inequalities\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Exercises"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Boyd 2.1\n",
    "\n",
    "Let $C\\subseteq \\mathbf{R}^n$ be a convex set, with $x_1,\\, \\ldots,x_k\\in C$\n",
    "and let $\\theta_1 + \\ldots + \\theta_k=1$. Show that $\\theta_1 x_1 + \\cdots +\n",
    "\\theta_k x_k \\in C$. (The definition of convexity is that this holds for\n",
    "$k=2$, you must show it for arbitrary $k$). _Hint._ Use induction on $k$.\n",
    "\n",
    "\n",
    "__proof.__\n",
    "In the base case for $k=1$, $x_1\\in C$ since all $x_i \\in C$. Now suppose that the claim holds true for $n=k-1$, that is, that $$\\sum_{i=1}^{k-1}\\theta_i x_i \\in C \\qquad \\text{ if } \\sum_{i=1}^{k-1}\\theta_i = 1$$\n",
    "\n",
    "Now the question is if $x = \\sum_{i=1}^{k} \\theta_i x_i$ is also in $C$. If $\\theta_k = 1$, we are done (since $x_k \\in C$ and all other $\\theta_i = 0$), so suppose that $\\theta_k \\neq 1$. Note that \n",
    "\n",
    "$$ s\\equiv \\sum_{i=1}^{k-1} \\theta_i = 1 - \\theta_k $$\n",
    "\n",
    "(importantly, $s\\neq0$) and re-write the sum\n",
    "\n",
    "$$x = \\sum_{i=1}^{k}\\theta_i x_i = (1-\\theta_k)\\underbrace{\\sum_{i=1}^{k-1} \\frac{\\theta_i}{s} x_i}_{x^\\prime} + \\theta_k x_k $$\n",
    "\n",
    "where $x^\\prime \\in C$, since $\\sum_{i=1}^{k-1}\\frac{\\theta_i}{s} = 1$  (adding each portion of the sum $s$) and since we assumed the claim for $n=k$. Then since $x^\\prime, x_k \\in C$, and $C$ is a convex set, we have that $x\\in C$, which completes the proof by induction."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Boyd 2.2\n",
    "\n",
    "**Show that a set is convex if and only if its intersection with any line is convex. Show that a set is affine if and only if its intersection with any line is affine.**\n",
    "\n",
    "We only prove the convex part.\n",
    "\n",
    "__proof.__ \n",
    "\n",
    "$(\\Rightarrow)$ Suppose that a set $C$ is convex. Let the set $L$ represent an arbitrary line. If the intersection is the empty set $\\emptyset$, we are done (since the empty set is convex), so suppose the intersection $C \\cap L$ is non-empty. Let $x_1, x_2 \\in C \\cap L$, which implies that $x_1, x_2 \\in C$ and the intersection is convex.\n",
    "\n",
    "$(\\Leftarrow)$ Suppose that the intersection of any line with a set $C$ is convex. Choose any $x_1, x_2 \\in C$. Then the line segment $LS = \\theta x_1 + (1-\\theta) x_2$ with $0\\leq \\theta\\leq 1$ represents a convex subset of the intersection of the line $\\theta x_1 + (1-\\theta)x_2$ with $\\theta\\in\\mathbb{R}$, hence all points in $LS$ lie in $C$. Since choice of $x_1, x_2$ was arbitrary, our conclusion holds for any $x_1, x_2$ and we have that $C$ is convex."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Boyd 2.5\n",
    "\n",
    "What is the distance between two parallel hyperplanes $\\left\\{x \\in \\mathbf{R}^n\n",
    "\\mid a^T x = b_1\\right\\}$ and $\\left\\{x \\in \\mathbf{R}^n \\mid a^Tx = b_2\\right\\}$?\n",
    "\n",
    "<img src=\"convex_img/ch2_2.5_soln.jpg\" width=500>\n",
    "note: should actually be $|b_2 - b_1|$ to be general"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Boyd 2.7\n",
    "\n",
    "*Voronoi description of halfspace.* Let $a$ and $b$ be distinct points in\n",
    "$\\mathbf{R}^n$. Show that the set of all points that are closer (in Euclidean\n",
    "norm) to $a$ than to $b$, i.e., $\\left\\{x \\mid \\left\\Vert x -\n",
    "a\\right\\Vert_{2}^{}  \\leq \\left\\Vert x - b\\right\\Vert_{2}^{} \\right\\},$ is a\n",
    "halfspace. Describe it as an inequality of the form $c^T x \\leq d$. Draw a\n",
    "picture.\n",
    "\n",
    "<img src=\"convex_img/ch2_2.7_soln.jpg\">"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "NMSMExp_env",
   "language": "python",
   "name": "nmsmexp_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
