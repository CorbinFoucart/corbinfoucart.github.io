{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.linalg as linalg"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The fundamental spaces of linear algebra"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solution of linear systems\n",
    "\n",
    "We can enconde RREF operations in a matrix by appending the identity to the\n",
    "matrix to which we apply the RREF.\n",
    "\n",
    "\\begin{equation}\n",
    "\\begin{bmatrix}\n",
    "A & I\n",
    "\\end{bmatrix}\n",
    "\\rightarrow_{RREF}\n",
    "\\begin{bmatrix}\n",
    "R & E\n",
    "\\end{bmatrix}\n",
    "\\end{equation}\n",
    "\n",
    "Then clearly $E$ is the matrix that takes $A \\to R$  (you can see  this by\n",
    "premultiplication; only $E$ could take $I$ to $E$).\n",
    "\n",
    "In the special case when $A$ is square and invertible, this is how we computed the inverse matrix:\n",
    "\n",
    "\\begin{equation}\n",
    "\\begin{bmatrix}\n",
    "A & I\n",
    "\\end{bmatrix}\n",
    "\\to_{RREF} \n",
    "\\begin{bmatrix}\n",
    "I & A^{-1}\n",
    "\\end{bmatrix}\n",
    "\\end{equation}\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nullspace"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The nullspace is an attribute of a linear operator, here a matrix $A$. It is the\n",
    "set of all vectors for which $A x = 0$.\n",
    "\n",
    "\\begin{equation}\n",
    "\\mathcal{N}(A) = \\left\\{x \\mid Ax = 0\\right\\}.\n",
    "\\end{equation}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Finding a basis for the nullspace"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I don't know why, but I have a mental block about the procedure for finding a basis of the nullspace. \n",
    "\n",
    "One way of understanding it is that we are analytically solving the system of equations that determins $Ax = 0$ and expressing the solution set in terms of a\n",
    "set of spanning vectors. \n",
    "\n",
    "I can remember how to do it with a mnemonic example:\n",
    "\n",
    "**Mnemonic example** $A = [1, 2, 3]$\n",
    "\n",
    "For $A = [1, 2, 3]$, $[1, 2, 3]x = 0$ implies\n",
    "\n",
    "\\begin{align}\n",
    "x_1 + 2x_2 + 3x_3 = 0 \\implies x_1 = -2x_2 - 3x_3\n",
    "\\end{align}\n",
    "\n",
    "and in principle we are done. Any vector whose components follow this rule will\n",
    "sit in the nullspace of $A$. But practically, we want a spanning set of vectors\n",
    "in the nullspace. \n",
    "\n",
    "The idea is that we have expressed a constraint on $x_1$, but $x_2 $ and $x_3$\n",
    "are completely unconstrained. So we introduce two dummy equations:\n",
    "\n",
    "\\begin{align}\n",
    "x_1 &= -2x_2 - 3x_3 \\\\\n",
    "x_2 &= x_2 \\\\\n",
    "x_3 &= x_3\n",
    "\\end{align}\n",
    "\n",
    "Then writing the spanning set is a matter of grouping everything in terms of the\n",
    "unconstrained variables\n",
    "\n",
    "\\begin{equation}\n",
    "x=\n",
    "\\begin{bmatrix}\n",
    "-2 \\\\ 1 \\\\ 0\n",
    "\\end{bmatrix}\n",
    "x_2 +\n",
    "\\begin{bmatrix}\n",
    "-3 \\\\ 0 \\\\ 1\n",
    "\\end{bmatrix}\n",
    "x_3\n",
    "\\end{equation}\n",
    "\n",
    "or that\n",
    "\n",
    "\\begin{equation}\n",
    "\\mathcal{N}(A) = \\text{span}\n",
    "\\left\\{\n",
    "\\begin{bmatrix}\n",
    "-2 \\\\ 1 \\\\ 0\n",
    "\\end{bmatrix},\n",
    "\\begin{bmatrix}\n",
    "-3 \\\\ 0 \\\\ 1\n",
    "\\end{bmatrix}\n",
    "\\right\\}\n",
    "\\end{equation}\n",
    "\n",
    "**General procedure:**\n",
    "\n",
    "So practically, solving the system amounts to an `RREF` operation, and then we can read off the nullspace  using the following shortcut\n",
    "\n",
    "\\begin{equation}\n",
    "RREF(A) = \n",
    "\\begin{bmatrix}\n",
    "F \\\\ 0\n",
    "\\end{bmatrix}\n",
    "\\qquad\\to\\mathcal{N}(A) = \n",
    "\\begin{bmatrix}\n",
    "-F \\\\ I\n",
    "\\end{bmatrix}\n",
    "\\end{equation}\n",
    "\n",
    "Where we express the pivot variables in terms of the free variables. Each free variable corresponds to a basis vector of the nullspace.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Of course, if we ever need this practically, just ask a libary to do it. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.89442719],\n",
       "       [ 0.4472136 ]])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = np.array([\n",
    "    [1, 2],\n",
    "    [3, 6]\n",
    "])\n",
    "N = linalg.null_space(A)\n",
    "N"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Nullspace intuition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.78096529, 5.34289588])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "v = np.random.rand(2)\n",
    "A @ v"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Column space "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The columnspace of a linear operator $A$ is the set of all linear combinations of the columns of $A$, the set\n",
    "\n",
    "\\begin{equation}\n",
    "\\mathcal{C}(A) = \\left\\{ \\text{all vectors }Ax \\right\\}\n",
    "\\end{equation}\n",
    "\n",
    "\n",
    "It can be thought of as \n",
    "- All linear combinations of the columns of $A$\n",
    "- the range of $A$, everything that $A$ can \"hit\"\n",
    "\n",
    "The equation $Ax = b$ is solvable exactly when $b \\in \\mathcal{C}(A)$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Column space intuition"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Finding a basis for the column space\n",
    "\n",
    "Computing a basis for the column space, procedurally, is simple. Find $RREF(A)$ and read off the pivot columns. Those columns span the column space. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visual assessment of matrices\n",
    "\n",
    "By visually inspecting a matrix $A\\in \\mathbf{R}^{m\\times n}$, we can say quite a bit about the nullspace, column space, and the solution set $Ax = b$. \n",
    "\n",
    "*Inputs and outputs*\n",
    "\n",
    "$A\\in \\mathbf{R}^{m\\times n}$ takes as input a vector in $x\\in \\mathbf{R}^{n}$ and outputs a vector $Ax \\in \\mathbf{R}^{m}$. An abstract linear operator $A(x)\\colon \\mathbf{R}^{n}\\to \\mathbf{R}^{m}$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### \\\"Fat\\\" matrices\n",
    "\n",
    "A *fat* matrix ($m < n$) operates on a vector in $\\mathbf{R}^{n}$ and squashes it into a lower-dimensional vector. We assume that the fat matrix has full \"row  rank\", that $RREF(A)$ has a pivot in each row.\n",
    "\n",
    "*Solutions to linear systems*\n",
    "\n",
    "The linear system will be consistent for *any* $b$; in this case, there is a linear dependence in the columns, there must be infinite solutions.\n",
    "\n",
    "**Full \"row\" rank** $\\implies$ linear system is consistent for any $b$.\n",
    "\n",
    "The nullspace $\\mathcal{N}(A)$ can not be trivial. $Ax = 0$ will have infinitely many solutions due to the redundancy in columns.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### \\\"Tall\\\" matrices\n",
    "\n",
    "A *tall* matrix ($m>n$) operates on a vector in $\\mathbf{R}^{n}$ and returns a higher-dimensional vector. We assume that the fat matrix has full \"column rank\"; that $RREF(A)$ has a pivot in each column.\n",
    "\n",
    "*Solutions to linear systems*\n",
    "\n",
    "Since the matrix has full column rank, if there is a solution for a right-hand side $b$, it is unique. Full column rank means *no free variables*.\n",
    "\n",
    "**Full \"column\" rank** $\\implies$ if there is a solution to $Ax = b$, it's unique.\n",
    "\n",
    "The columnspace $\\mathcal{C}(A)$ can not span the whole space of $\\mathbf{R}^n$, so the system can not be consistent for all $b\\in \\mathbf{R}^m$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Square matrices \n",
    "\n",
    "A *square* matrix ($m=n$) operates on a vector in $\\mathbf{R}^{n}$ and returns a vector in the same space.\n",
    "\n",
    "**Full rank** $\\implies$ there is a unique solution $x$ for every right-hand side $b$.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The four fundamental spaces of linear algebra"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python [conda env:NMSMExp_env]",
   "language": "python",
   "name": "conda-env-NMSMExp_env-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
