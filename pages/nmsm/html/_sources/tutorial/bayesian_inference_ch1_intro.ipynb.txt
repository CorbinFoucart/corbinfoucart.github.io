{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.stats as stats\n",
    "import pandas as pd\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('bmh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "\n",
    "## The Bayesian and frequentist viewpoints\n",
    "\n",
    "The Bayesian approach interprets probabilities as the measure of the\n",
    "*believability of an event*, that is, how confident we are in an event\n",
    "occurring.\n",
    "\n",
    "A **frequentist** approach interprets probabilities as the long-run frequency of\n",
    "the event occurring. That is, an event's probability is the limit of its\n",
    "relative frequency after many trials. This sometimes makes sense.  The\n",
    "probability of flipping heads with a fair coin can be interpreted as the\n",
    "frequency of heads occurring if we did infinite flips. However, for something\n",
    "like an election, we would like to assign a probability of a candidate winning,\n",
    "even if we can do the election only once.  Frequentists get around this by\n",
    "saying if you *could* repeat the experiment, the frequency with the event\n",
    "occurred after infinite trials would represent the event probability. However\n",
    "for real world examples that occur once, this is a bit squirrely, since exactly\n",
    "repeating the experiment should reproduce the same result. This introduces all\n",
    "sorts of rabbit holes that we will ignore.\n",
    "\n",
    "The **Bayesian** approach, by comparison, is a lot more intuitive. Bayesians\n",
    "interpret probabilities as the belief, or confidence, that an event will occur.\n",
    "This removes the need for many experiments and maps nicely to how the human\n",
    "brain interprets probabilities.\n",
    "\n",
    "### Analogy to computer functions\n",
    "\n",
    "If you were to consider Bayesian and frequentist inference as programming\n",
    "functions, both would take a statistical problem as an input, but would return\n",
    "different outputs. The frequentist function would return *a number representing\n",
    "an estimate* (usually a summary statistic or expected value).\n",
    "The Bayesian function would return *probabilities*. The Bayesian function could additionally take as an optional argument a *prior belief* about the outcome.\n",
    "\n",
    "**Example**\n",
    "> Suppose each program was to estimate whether a patient has a disease given $X$ symptoms. The frequentist function would output an answer like `NO`. The Bayesian program would output probabilities over the outcomes, like `NO with probability 0.8, YES with a probability 0.2`.\n",
    "\n",
    "Bayesian inference can be thought of as re-weighting prior beliefs according to new evidence.\n",
    "\n",
    "### Practical considerations\n",
    "\n",
    "- Frequentist approaches are still very useful, and tend to be computationally much cheaper than Bayesian approaches.\n",
    "- Bayesian approaches attempt to offer a more comprehensive view of beliefs, but can be much more expensive.\n",
    "- Which technique to use is largely problem dependent.\n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bayesian framework\n",
    "\n",
    "### Bayes Theorem for an event\n",
    "Suppose we are interested in the probability of an event $E$ occurring. We start\n",
    "with a prior belief $P(E)$. We then make an observation $Y$. We want to know\n",
    "how likely it was that $E$ occurs, given that we observed $Y$\n",
    "\n",
    "\\begin{align}\n",
    "P(E|Y) = \\frac{P(Y|E)P(E)}{P(Y)} \n",
    "\\end{align}\n",
    "\n",
    "where\n",
    "- $P(E)$ is the prior: what we believe before making an observation.\n",
    "- $P(Y|E)$ is the likelihood: the probability of observing $Y$ if $E$ occurs.\n",
    "- $P(Y)$ is the normalizing factor: the probability that we observe $Y$ to begin with.\n",
    "- $P(E|Y)$ is the posterior probability (output): the probability that $E$ occurs, given that we've seen $Y$.\n",
    "\n",
    "#### Example: drug testing\n",
    "\n",
    "Suppose that 0.5\\% of a population uses a particular drug. The test for this particular drug is 99\\% accurate, which we take to mean that the test will produce a positive result for 99\\% of drug users, and a negative result for 99\\% of non-users.  \n",
    "\n",
    "A guy walks into your clinic and tests positive for the drug. What is the probability that he has actually used the drug? Let $+$ and $-$ denote the events of a positive and negative test, respectively.\n",
    "\n",
    "\\begin{align}\n",
    "P(\\text{drug user} \\mid +) \n",
    "&= \\frac{P(\\text{drug user}) P(+\\mid \\text{drug user})}{P(+)} \\\\\n",
    "&= \\frac{P(\\text{drug user}) P(+\\mid \\text{drug user})}{P(+\\mid \\text{drug user})P(\\text{drug user}) + P(+\\mid\\text{not drug user})P(\\text{not drug user}) } \\\\\n",
    "&= \\frac{(0.99)(0.005)}{(0.99)(0.005) + (0.01)(0.995)}  \\\\\n",
    "&= 0.332\n",
    "\\end{align}\n",
    "\n",
    "This is surprising to most people; that son of a bitch walked into your clinic and tested positive on your highly accurate test, yet it's more likely that he *isn't* a drug user. What's going on?\n",
    "\n",
    "The intuition gap here comes from the prior. It was way more likely that he didn't user drugs to begin with, which skews the probability towards a false positive. \n",
    "\n",
    "The explicit way to think about it is out of 1000 people, 5 will be drug users. Almost certainly, they'll all test positive. Out of the other 995 that aren't users, 9.95 $\\sim 10$ will test positive due to the $1%$ error of the test. Only 5 users out of the 15 positives are actual drug users $\\sim 0.33$ probability of a positive indicating drug usage, as we calculated.\n",
    "\n",
    "### Bayes' theorem for random variables\n",
    "\n",
    "The statement of Bayes' theorem in terms of events can quickly become unwieldy when there are lots of non-simple events. The nice thing is that the theorem holds for random variables and distributions, which will be much more powerful.\n",
    "\n",
    "We use $\\theta$ to denote parameters of interest that we want to infer. We use $y$ to denote observed data. Then the *joint distribution* of $\\theta$ and $y$ is $p(\\theta,y)$ and can be factored into conditional distributions\n",
    "\n",
    "\\begin{equation}\n",
    "p(\\theta,y) = p(\\theta)p(y|\\theta) = p(y)p(\\theta|y)\n",
    "\\end{equation}\n",
    "\n",
    "From where we can write Bayes' rule for the *posterior* distribution\n",
    "\n",
    "\\begin{equation}\n",
    "p(\\theta|y) = \\frac{p(\\theta)p(y|\\theta)}{p(y)} \n",
    "\\end{equation}\n",
    "\n",
    "where $p(\\theta)$ has the interior of the *prior* distribution, that is, what we believe about $\\theta$ without any obserations $y$. Sometimes it's useful to write the denominator as a function of $\\theta$ as well by summing over all its possible values, loosely:\n",
    "\n",
    "\\begin{equation}\n",
    "p(\\theta|y) = \\frac{p(\\theta)p(y|\\theta)}{p(y)} \n",
    "= \\frac{p(\\theta)p(y|\\theta)}{\\sum_{\\theta}^{} p(\\theta)p(y|\\theta)} \n",
    "\\end{equation}\n",
    "\n",
    "Usually we don't care about the normalization factor though; it's typically expensive or not possible to compute. What we generally care about is the shape of the posterior, so we can also ignore the normalization factor and write\n",
    "\n",
    "\\begin{equation}\n",
    "p(\\theta|y) \\propto p(\\theta)p(y|\\theta)\n",
    "\\end{equation}\n",
    "\n",
    "That's it. In principle this is all to the core of Bayesian inference. If we can form these objects well, we can do inference."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Linking example: being a carrier for Hemophilia\n",
    "\n",
    "This example links the event discription and the distribution description.\n",
    "\n",
    "**Biological aside:**\n",
    "\n",
    "Males have XY chromosomes and females have XX chromosomes. Hemophilia is X-linked; if you're male and your only X chromosome has the hemophilia gene, you're affected. If you're female, you generally can't have hemophilia. You either have neither X chromosome affected (not a carrier) or have a single X chromosome with the hemophilia gene (carrier but not affected). If a female has both chromosomes with hemophilia, they are affected but usually die, so we exclude that segment of the population.\n",
    "\n",
    "**Question of interest**\n",
    "\n",
    "Suppose a woman has a brother affected by hemophilia. Then her mother certainly was a carrier, and she has a 50% probability of being a carrier. For each son she has, she gets more information on the probability that she is a carrier.\n",
    "\n",
    "Let $\\theta$ be a random variable indicating whether she is a carrier; $\\theta=0$ is the probability that she isn't a carrier and $\\theta=1$ is the probability that she is. Each son she has is either affected ($y_i=1$) or not $(y_i=0)$.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Before the woman has any sons, clearly the probability of her being a carrier is 50/50, which we encapsulate with the prior $p(\\theta=1)=0.5$. \n",
    "\n",
    "**Case 1: first son affected**\n",
    "\n",
    "If any son is affected, she is clearly a carrier, and the math works. Suppose the first son is affected.\n",
    "\n",
    "\\begin{align}\n",
    "p(\\theta=1 | y_1=1) \n",
    "&= \\frac{p(y_1=1|\\theta=1)p(\\theta=1)}{p(y_1=1)} \\\\\n",
    "&= \\frac{p(y_1=1|\\theta=1)p(\\theta=1)}{p(y_1=1|\\theta=1)p(\\theta=1)+p(y_1=1|\\theta=0)p(\\theta=0)} \\\\\n",
    "&= \\frac{(0.5)(0.5)}{(0.5)(0.5) + (0)(0.5)} = 1\n",
    "\\end{align}\n",
    "\n",
    "**Case 2: first son not affected**\n",
    "\n",
    "However, if instead her first son is unaffected $y_1 = 0$:\n",
    "\n",
    "\\begin{align}\n",
    "p(\\theta=1 | y_1=0) \n",
    "&= \\frac{p(y_1=0|\\theta=1)p(\\theta=1)}{p(y_1=0)} \\\\\n",
    "&= \\frac{p(y_1=0|\\theta=1)p(\\theta=1)}{p(y_1=0|\\theta=1)p(\\theta=1)+p(y_1=0|\\theta=0)p(\\theta=0)} \\\\\n",
    "&= \\frac{(0.5)(0.5)}{(0.5)(0.5) + (1)(0.5)} = 0.33\n",
    "\\end{align}\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Sequential data assimilation**\n",
    "\n",
    "One of the nice things about the Bayesian approach is that as more data flows in, we don't have to start from the beginning. Our posterior distribution before the new data just becomes the new prior!\n",
    "\n",
    "Suppose she has a second unaffected son. How does her probability of being a carrier change? The math is the same, only the prior is different.\n",
    "\n",
    "\\begin{align}\n",
    "p(\\theta=1 | y_1=0) \n",
    "&= \\frac{p(y_1=0|\\theta=1)p(\\theta=1)}{p(y_1=0)} \\\\\n",
    "&= \\frac{p(y_1=0|\\theta=1)p(\\theta=1)}{p(y_1=0|\\theta=1)p(\\theta=1)+p(y_1=0|\\theta=0)p(\\theta=0)} \\\\\n",
    "&= \\frac{(0.5)(1/3)}{(0.5)(1/3) + (1)(2/3)} = 0.2\n",
    "\\end{align}\n",
    "\n",
    "So the likelihood of her being a carrier has further decreased. \n",
    "\n",
    "In fact, we can even write code to sequentially compute her probability of being a carrier for every subsequent nonaffected son."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "class p_yθ_(object):\n",
    "    def __init__(self):\n",
    "        # probabilities matrix; y is row, θ is col\n",
    "        self.P = np.array([[1,0.5],\n",
    "                           [0,0.5]])\n",
    "    def __call__(self, y, θ):\n",
    "        return self.P[y,θ]  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "carrier_likelihood, trials = list(), 12\n",
    "pθ = [0.5, 0.5]\n",
    "pyθ = p_yθ_()\n",
    "\n",
    "for i in range(trials):\n",
    "    num = pyθ(y=0,θ=1) * pθ[1]\n",
    "    denom = pyθ(y=0,θ=1)*pθ[1] + pyθ(y=0,θ=0)*pθ[0]\n",
    "    posterior_probability = num/denom\n",
    "    carrier_likelihood.append(posterior_probability)\n",
    "    \n",
    "    # update our prior belief\n",
    "    pθ = [1-posterior_probability, posterior_probability]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(np.arange(trials), carrier_likelihood, '--o')\n",
    "plt.title(r'carrier prob`ability vs. n unaffected sons'); plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With each subsequent unaffected son, the probability of the woman being a carrier drops. Unfortunately, she'd have to have around 7 sons to be 99% sure she's not a carrier!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv('../data/gelman_football_data_cleaned.txt', sep=\"\\s+\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "outcomes = data['favorite'].values - data['underdog'].values\n",
    "point_spread = data['spread'].values\n",
    "plt.scatter(x=point_spread, y=outcomes)\n",
    "plt.xlabel('point spread'); plt.ylabel('outcome')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What is the empirically the probability that a favorite will win the game?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6584821428571429"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "favorite_won = outcomes > 0\n",
    "np.sum(favorite_won)/len(favorite_won)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example: Finding the bias of an unfair coin\n",
    "\n",
    "Suppose, naively, that you are unsure about the probability of heads in a coin which you supect could be biased (here it's 65%). You believe there is some true underlying ratio, call it $p$, but have no prior opinion on what $p$ might be. \n",
    "\n",
    "We begin to flip a coin, and record the observations: either $H$ or $T$. This is our observed data. An interesting question to ask is how our inference changes as we observe more and more data--more specifically, what do our posterior probabilities look like when we have little data, versus when we have lots of data. \n",
    "\n",
    "### Analytical solution via conjugate priors\n",
    "\n",
    "The thing we are trying to estimate is the parameter $p$. Out of\n",
    "$n=s + f$ trials, we have $s$ successes (H) and $f$ failures (T). We know the\n",
    "probability of observing $s$ heads given a choice of $p$; it's the Binomial\n",
    "distribution. This is the likelihood function"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\\begin{equation}\n",
    "P(s|p) = { s+f \\choose s} p^s (1-p)^f.\n",
    "\\end{equation}\n",
    "\n",
    "We have a choice as to what our prior belief should be. A reasonable choice is a\n",
    "uniform distribution over all possible values of $p$ on $[0,1]$. But we can do\n",
    "even better. We can choose a well known **conjugate prior** of the likelihood,\n",
    "which means that we choose a prior such that when we compute the posterior\n",
    "\n",
    "\\begin{equation}\n",
    "P(p|s) \\propto P(s|p)P(p),\n",
    "\\end{equation}\n",
    "\n",
    "it has the same form as the prior we started with. This is useful for continuous\n",
    "updates, because we can then take the posterior as our new prior and repeat the\n",
    "same procedure, confident that the algebra will be the same.\n",
    "\n",
    "Let's make this concrete. We drop all normalizing factors since we'll just be\n",
    "interested in plotting the distribution shape. Suppose we choose a prior\n",
    "according to a Beta distribution\n",
    "\n",
    "\\begin{equation}\n",
    "\\text{Beta}(\\alpha,\\beta) = \\frac{x^{\\alpha-1}(1-x)^{\\beta-1}}{B(\\alpha,\\beta)} \n",
    "\\propto  x^{\\alpha-1}(1-x)^{\\beta-1},\n",
    "\\end{equation}\n",
    "\n",
    "where $B(\\alpha,\\beta)$ is a constant that comes from evaluating the Gamma\n",
    "function. We can compute the unnormalized posterior directly as\n",
    "\n",
    "\\begin{align}\n",
    "P(p|s) &\\propto \n",
    "{ s+f \\choose s} p^s (1-p)^f\n",
    "p^{\\alpha-1}(1-p)^{\\beta-1}, \\\\\n",
    "&\\propto p^{(s+\\alpha)-1}(1-p)^{(f+\\beta)-1},\n",
    "\\end{align}\n",
    "\n",
    "which is a new Beta distribution with parameters $(s+\\alpha,\\, f+\\beta)$. The\n",
    "posterior distribution can be used as a prior for more samples, with $\\alpha$\n",
    "and $\\beta$ adding additional information as it comes in. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Beta = stats.beta\n",
    "p_true = 0.65\n",
    "x = np.linspace(0,1,300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "trials = [0, 1, 2, 4, 8, 32, 256, 3000] # even for figure\n",
    "simulation = stats.bernoulli.rvs(p=p_true, size=trials[-1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A frequentist estimate of the bias of the coin could be found by simply taking the average of the array, which contains the zeroes and ones of the simulation. Extremely cheap, but doesn't give us the uncertainty."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "np.mean(simulation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(nrows=len(trials) // 2, ncols=2, figsize=(13, 7))\n",
    "ax = ax.reshape(-1)\n",
    "\n",
    "for i, N in enumerate(trials):\n",
    "    \n",
    "    tosses = simulation[:N]\n",
    "    heads_so_far = np.sum(tosses)\n",
    "    tails_so_far = N - heads_so_far\n",
    "    α, β = heads_so_far + 1, tails_so_far + 1\n",
    "    posterior = Beta.pdf(x, α, β)\n",
    "    \n",
    "    ax[i].fill_between(x, posterior, alpha=0.3)    \n",
    "    ax[i].plot(x, posterior, label='{} tosses, {} heads'.format(N, heads_so_far))\n",
    "    ax[i].vlines(p_true, 0, np.max(posterior), color=\"k\", linestyles=\"--\", lw=1)\n",
    "    ax[i].legend()\n",
    "    \n",
    "\n",
    "# plot aesthetics\n",
    "for axis in ax:\n",
    "    axis.set_yticklabels([]); \n",
    "    axis.autoscale(tight=True)\n",
    "ax[0].set_ylim([0,2])\n",
    "\n",
    "plt.suptitle(r'posterior distributions for biased coin')\n",
    "plt.subplots_adjust(hspace=0.45, wspace=0.1); \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**remarks**\n",
    "- before we've seen any\n",
    "information, if we initialize with $\\alpha=\\beta=1$ that the prior distribution\n",
    "is uniform!\n",
    "- the Bayesian description of the coin does better than a frequentist estimation in the sense that it also shows how confident we are in our estimate.\n",
    "- Initially, with ~10 tosses, our posterior is still pretty uncertain, we can't really say much of anything without more data.\n",
    "- After only 256 tosses, it's highly likely that the coin is biased. After 3000 tosses we're basically certain that the coin is biased.\n",
    "- coming up with an analyitcal solution to an inference problem only works in very special (toy problem) cases; we need other approaches for real problems."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Example: Inference of a distribution parameter\n",
    "\n",
    "### Quick review of the Poisson distribution\n",
    "\n",
    "The Poisson distribution is a discrete probability distribution which is used to model the probability of a givne number of events occurring in a fixed interval of space or time.\n",
    "\n",
    "**Assumptions**\n",
    "> The Poisson distribution is a good model if\n",
    "- The occurrence of one event does not change the probability that another event will occur  (events are indpendent).\n",
    "- The average rate of event occurrence does not change.\n",
    "\n",
    "The distribution is defined over $\\mathbb{N}_0$ and has PMF\n",
    "\n",
    "\\begin{equation}\n",
    "\\text{Pois}(\\lambda) \\sim \\frac{\\lambda^k}{k!} e^{-\\lambda} \\qquad k=0,1,2,\\ldots\n",
    "\\end{equation}\n",
    "\n",
    "if $Z\\sim \\text{Pois}(\\lambda)$, then $E[Z] = \\lambda$ and $Var(Z) = \\lambda$.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "Pois = stats.poisson\n",
    "ks = np.arange(16)\n",
    "λs = [1.5, 4.25]\n",
    "\n",
    "for λ in λs:\n",
    "    plt.bar(ks, Pois.pmf(ks, λ), alpha=0.6,\n",
    "            label=r'$\\lambda={}$'.format(λ))\n",
    "plt.title(r'PMF of Pois($\\lambda$), for different $\\lambda$')\n",
    "plt.legend(); plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python [conda env:NMSMExp_env]",
   "language": "python",
   "name": "conda-env-NMSMExp_env-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
